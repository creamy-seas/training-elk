#!/usr/bin/env bash

if ! [ -x "$(command -v docker-compose)" ]; then
  echo 'Error: docker-compose is not installed.' >&2
  exit 1
fi

DOMAINS=(elkdreams-ai.com)
RSA_KEY_SIZE=4096
DATA_PATH="/data/certbot"
EMAIL="ilya.antonov@dreams-ai.com"
staging=0 # Set to 1 if you're testing your setup to avoid hitting request limits

# 1 - check if certificates exist #############################################
if [ -d "$DATA_PATH" ]; then
    read -p "Existing data found for $DOMAINS. Continue and replace existing certificate? (y/N) " decision
    if [ "$decision" != "Y" ] && [ "$decision" != "y" ]; then
	exit
    fi
fi


if [ ! -e "$DATA_PATH/conf/options-ssl-nginx.conf" ] || [ ! -e "$DATA_PATH/conf/ssl-dhparams.pem" ]; then
    echo "-> Downloading recommended TLS parameters ..."
    mkdir -p "$DATA_PATH/conf"
    curl -s https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf > "$DATA_PATH/conf/options-ssl-nginx.conf"
    # curl -s https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/tls_configs/options-ssl-nginx.conf > "$DATA_PATH/conf/options-ssl-nginx.conf"
    curl -s https://raw.githubusercontent.com/certbot/certbot/master/certbot/certbot/ssl-dhparams.pem > "$DATA_PATH/conf/ssl-dhparams.pem"
    # curl -s https://raw.githubusercontent.com/certbot/certbot/master/certbot/ssl-dhparams.pem > "$DATA_PATH/conf/ssl-dhparams.pem"
    echo
fi

# 2 - dummy certificates created with docker compose ##########################
echo "-> Creating dummy certificate for $DOMAINS ..."
mkdir -p "$DATA_PATH/conf/live/$DOMAINS"
echo "$DATA_PATH/conf/live/$DOMAINS"
path="/etc/letsencrypt/live/$DOMAINS"
docker-compose run --rm --entrypoint "\
  openssl req -x509 -nodes -newkey rsa:$RSA_KEY_SIZE -days 1\
    -keyout '$path/privkey.pem' \
    -out '$path/fullchain.pem' \
    -subj '/CN=localhost'" certbot
echo


echo "-> Starting frontend docker ..."
docker-compose up --force-recreate -d frontend
echo

echo "-> Deleting dummy certificate for $DOMAINS ..."
docker-compose run --rm --entrypoint "\
  rm -Rf /etc/letsencrypt/live/$DOMAINS && \
  rm -Rf /etc/letsencrypt/archive/$DOMAINS && \
  rm -Rf /etc/letsencrypt/renewal/$domains.conf" certbot
echo


echo "-> Requesting Let's Encrypt certificate for $DOMAINS ..."
#Join $DOMAINS to -d args
domain_args=""
for domain in "${DOMAINS[@]}"; do
    domain_args="$domain_args -d $domain"
done

# Select appropriate EMAIL arg
case "$EMAIL" in
    "") email_arg="--register-unsafely-without-email" ;;
    *) email_arg="--email $EMAIL" ;;
esac

# Enable staging mode if needed
if [ $staging != "0" ]; then staging_arg="--staging"; fi

docker-compose run --rm --entrypoint "\
	  certbot certonly --webroot -w /var/www/certbot \
	$staging_arg \
	$email_arg \
	$domain_args \
	--rsa-key-size $RSA_KEY_SIZE \
	--agree-tos \
	--force-renewal" certbot
echo

echo "-> Reloading nginx ..."
# Reload the frontend nginx configuration
docker-compose exec frontend nginx -s reload
